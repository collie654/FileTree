<Window x:Class="TreeView.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:TreeView"
        mc:Ignorable="d"
        Title="MainWindow" Height="350" Width="525">
    <Grid>
        <!--
        ItemSource sets the object source that gives us the folder/files names & images
        In this case, we're Binding to Items (DirectoryStructureViewModel.cs)
        -->
        <TreeView x:Name="FolderView" ItemsSource="{Binding Items}">

            <!--Creating a styles sheet for TreeViewItems specifically-->
            <TreeView.ItemContainerStyle>
                <Style TargetType="{x:Type TreeViewItem}">
                    <!-- 
                    Property tells it what to apply to the Value
                    Value is setting the value that is effect by the property
                    Basically saying when the /\ TreeViewItem is \/ IsExpanded 
                    use IsExpanded (DirectoryItemViewModel.cs)
                    -->
                    <Setter Property="IsExpanded" Value="{Binding IsExpanded, Mode=TwoWay}" />
                </Style>
            </TreeView.ItemContainerStyle>

            <!--setting the DataTemplate used to display each item-->
            <TreeView.ItemTemplate>
                <!--
                The DataTemplate we're using because it supports TreeViewItems
                The source of our objects (ItemSource) is bound to Children 
                (DirectoryItemViewModel.cs)
                -->
                <HierarchicalDataTemplate ItemsSource="{Binding Children}">
                    <StackPanel Orientation="Horizontal">
                        <!--
                        Here we're setting the Images Binding to
                        Type (DirectoryItemViewModel.cs) which is manipulated by the Converter
                        
                        We're also setting a Converter so that we can change which 
                        image appears for files and folders. HeaderToImageConverter 
                        returns a BitMapImage of this image
                        -->
                        <Image Width="20" Margin="3"
                            Source="{Binding Type,
                                Converter={x:Static local:HeaderToImageConverter.Instance}}"/>
                        <!--
                        We're setting the text block to fill based on the Binding 
                        Name (DirectoryItemViewModel.cs)
                        -->
                        <TextBlock VerticalAlignment="Center" Text="{Binding Name}"/>
                    </StackPanel>
                </HierarchicalDataTemplate>
            </TreeView.ItemTemplate>
        </TreeView>
        
    </Grid>
</Window>
